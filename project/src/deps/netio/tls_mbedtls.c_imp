/** 
 *  Copyright (c) 2018 KT Corp. All rights reserved.
 *
 *  This is a proprietary software of KT corp, and you may not use this file except in
 *  compliance with license agreement with KT corp. Any redistribution or use of this
 *  software, with or without modification shall be strictly prohibited without prior written
 *  approval of KT corp, and the copyright notice above does not evidence any actual or
 *  intended publication of such software.
 *
 */

#ifdef HAVE_MBEDTLS

#include "net_context.h"
#include "kt_iot_log.h"

static int exit_code = MBEDTLS_EXIT_FAILURE;

static void my_debug( void *ctx, int level,
                      const char *file, int line,
                      const char *str )
{
    ((void) level);

    mbedtls_fprintf( (FILE *) ctx, "%s:%04d: %s", file, line, str );
    fflush(  (FILE *) ctx  );
}


static int init_mbedtls_lib(tls_channel_tPtr tls_ctx)
{
  /* ---------------------------------------------------------- *
   * initialize SSL library                                     *
   * ---------------------------------------------------------- */
	int ret = 0;

    const char *pers = "ssl_client1";

#if defined(MBEDTLS_DEBUG_C)
    mbedtls_debug_set_threshold( __MBEDTLS_DEBUG_LEVEL );
#endif
    /*
     * 0. Initialize the RNG and the session data
     */
    mbedtls_net_init( &tls_ctx->server_fd );
    mbedtls_ssl_init( &tls_ctx->ssl );
    mbedtls_ssl_config_init( &tls_ctx->conf );
    mbedtls_x509_crt_init( &tls_ctx->cacert );
    mbedtls_ctr_drbg_init( &tls_ctx->ctr_drbg );

    INF( "\n  . Seeding the random number generator..." );

    mbedtls_entropy_init( &tls_ctx->entropy );
    if( ( ret = mbedtls_ctr_drbg_seed( &tls_ctx->ctr_drbg, mbedtls_entropy_func, &tls_ctx->entropy,
                               (const unsigned char *) pers,
                               strlen( pers ) ) ) != 0 )
    {
        ERR( " failed\n  ! mbedtls_ctr_drbg_seed returned %d\n", ret );
        return -1;
    }

    DBG( " ok\n" );

#if 0
    /*
     * 0. Initialize certificates
     */
    INF( "  . Loading the CA root certificate ..." );

    ret = mbedtls_x509_crt_parse( &cacert, (const unsigned char *) mbedtls_test_cas_pem,
                          mbedtls_test_cas_pem_len );
    if( ret < 0 )
    {
        ERR( " failed\n  !  mbedtls_x509_crt_parse returned -0x%x\n\n", (unsigned int) -ret );
        return -1;
    }

    DBG( " ok (%d skipped)\n", ret );
#endif
  
  return 0;
}

static int setup_mbedtls_conf(tls_channel_tPtr tls_ctx)
{
	return 0;
}



static int __does_need_to_verify_peer(tls_channel_tPtr tls_ctx)
{
  INF("Not implemented yet");
  return 0;
}

static int init_ssl_certificate(tls_channel_tPtr tls_ctx)
{
  INF("Not implemented yet");
    return 0;
}

static int check_peer_certificate(tls_channel_tPtr tls_ctx)
{
  INF("Not implemented yet");
    return 0;
}
/////////////////////////////////////////////////


int net_tls_release(tls_channel_tPtr tls_ctx)
{
    mbedtls_ssl_close_notify( &tls_ctx->ssl );

#if 0
    int exit_code = MBEDTLS_EXIT_FAILURE;
#ifdef MBEDTLS_ERROR_C
    if( exit_code != MBEDTLS_EXIT_SUCCESS )
    {
        char error_buf[100];
        mbedtls_strerror( ret, error_buf, 100 );
        ERR("Last error was: %d - %s\n\n", ret, error_buf );
    }
#endif
#endif

    mbedtls_net_free( &tls_ctx->server_fd );

    mbedtls_x509_crt_free( &tls_ctx->cacert );
    mbedtls_ssl_free( &tls_ctx->ssl );
    mbedtls_ssl_config_free( &tls_ctx->conf );
    mbedtls_ctr_drbg_free( &tls_ctx->ctr_drbg );
    mbedtls_entropy_free( &tls_ctx->entropy );

    mbedtls_exit( exit_code );

  return 0;
}



int net_tls_open_socket_n_bind_with_ip(connection_tPtr ctx, char *ipaddr)
{
  tls_channel_tPtr tls_ctx = (tls_channel_tPtr)&(ctx->tls_channel);
  tcp_channel_tPtr tcp_ctx = (tcp_channel_tPtr)&(ctx->tcp_channel);

    // SSL 라이브러리 초기화
    if ( init_mbedtls_lib(tls_ctx) < 0 )    {
        return -1;
    }

  return 0;
}


int net_tls_open_socket(connection_tPtr ctx)
{
    tls_channel_tPtr tls_ctx = (tls_channel_tPtr)&(ctx->tls_channel);

    return net_tls_open_socket_n_bind_with_ip(ctx, NULL);
}



int net_tls_set_trusred_ca_file(connection_tPtr ctx, char *ca_file) 
{
  tls_channel_tPtr tls_ctx = (tls_channel_tPtr)&(ctx->tls_channel);

  tls_ctx->g_ca_file = ca_file;
  tls_ctx->g_ca_path = NULL;

  INF("ca_file =  [%s]", tls_ctx->g_ca_file);

  return 0;
}

int net_tls_set_trusred_ca_path(connection_tPtr ctx, char *ca_path) 
{
  tls_channel_tPtr tls_ctx = (tls_channel_tPtr)&(ctx->tls_channel);

  tls_ctx->g_ca_path = ca_path;
  tls_ctx->g_ca_file = NULL;

  INF("ca_path =  [%s]", tls_ctx->g_ca_path);

  return 0;
}




int net_tls_disconnect(connection_tPtr ctx)
{
  tls_channel_tPtr tls_ctx = (tls_channel_tPtr)&(ctx->tls_channel);
  tcp_channel_tPtr tcp_ctx = (tcp_channel_tPtr)&(ctx->tcp_channel);

  if ( tcp_ctx->sock > 0 )  {
    INF("Closing socket[%d]", tcp_ctx->sock);
	net_tls_release(tls_ctx);
  }

  return 0;
}



int net_tls_connect_ipv4(connection_tPtr ctx, char *host_addr_str, uint16_t port) 
{
  tls_channel_tPtr tls_ctx = (tls_channel_tPtr)&(ctx->tls_channel);
  tcp_channel_tPtr tcp_ctx = (tcp_channel_tPtr)&(ctx->tcp_channel);

	int ret = -1;

	uint32_t flags;

	char SERVER_PORT[8];
	sprintf(SERVER_PORT, "%d", port);

    /*
     * 1. Start the connection
     */
    DBG( "  . Connecting to tcp/%s/%s...", host_addr_str, SERVER_PORT );
    if( ( ret = mbedtls_net_connect( &tls_ctx->server_fd, host_addr_str,
                                         SERVER_PORT, MBEDTLS_NET_PROTO_TCP ) ) != 0 )
    {
        ERR( " failed\n  ! mbedtls_net_connect returned %d\n\n", ret );
        return -1;
    }
    DBG( " ok\n" );

	/* !!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
	tcp_ctx->sock = tls_ctx->server_fd.fd;


    /*
     * 2. Setup stuff
     */
    DBG( "  . Setting up the SSL/TLS structure..." );
    if( ( ret = mbedtls_ssl_config_defaults( &tls_ctx->conf,
                    MBEDTLS_SSL_IS_CLIENT,
                    MBEDTLS_SSL_TRANSPORT_STREAM,
                    MBEDTLS_SSL_PRESET_DEFAULT ) ) != 0 )
    {
        ERR( " failed\n  ! mbedtls_ssl_config_defaults returned %d\n\n", ret );
        return -1;
    }

    DBG( " ok\n" );

    /* OPTIONAL is not optimal for security,
     * but makes interop easier in this simplified example */
    mbedtls_ssl_conf_authmode( &tls_ctx->conf, MBEDTLS_SSL_VERIFY_OPTIONAL );
    mbedtls_ssl_conf_ca_chain( &tls_ctx->conf, &tls_ctx->cacert, NULL );
    mbedtls_ssl_conf_rng( &tls_ctx->conf, mbedtls_ctr_drbg_random, &tls_ctx->ctr_drbg );
    mbedtls_ssl_conf_dbg( &tls_ctx->conf, my_debug, stdout );

    if( ( ret = mbedtls_ssl_setup( &tls_ctx->ssl, &tls_ctx->conf ) ) != 0 )
    {
        ERR( " failed\n  ! mbedtls_ssl_setup returned %d\n\n", ret );
        return -1;
    }

    if( ( ret = mbedtls_ssl_set_hostname( &tls_ctx->ssl, host_addr_str ) ) != 0 )
    {
        ERR( " failed\n  ! mbedtls_ssl_set_hostname returned %d\n\n", ret );
        return -1;
    }

    mbedtls_ssl_set_bio( &tls_ctx->ssl, &tls_ctx->server_fd, mbedtls_net_send, mbedtls_net_recv, NULL );

    /*
     * 4. Handshake
     */
    DBG( "  . Performing the SSL/TLS handshake..." );

    while( ( ret = mbedtls_ssl_handshake( &tls_ctx->ssl ) ) != 0 )
    {
        if( ret != MBEDTLS_ERR_SSL_WANT_READ & ret != MBEDTLS_ERR_SSL_WANT_WRITE )
        {
            ERR( " failed\n  ! mbedtls_ssl_handshake returned -0x%x\n\n", (unsigned int) -ret );
            return -1;
        }
    }

    DBG( " ok\n" );

#if 0
    /*
     * 5. Verify the server certificate
     */
    DBG( "  . Verifying peer X.509 certificate..." );

    /* In real life, we probably want to bail out when ret != 0 */
    if( ( flags = mbedtls_ssl_get_verify_result( &tls_ctx->ssl ) ) != 0 )
    {
        char vrfy_buf[512];

        INF( " failed\n" );

        mbedtls_x509_crt_verify_info( vrfy_buf, sizeof( vrfy_buf ), "  ! ", flags );

        INF( "%s\n", vrfy_buf );
    }
    else 
	{
        DBG( " ok\n" );
	}
#endif

  exit_code = MBEDTLS_EXIT_SUCCESS;


  tls_ctx->g_connected = (1);
  DBG("Connected with cipher %s encryption", "err");

  ctx->netChannelType = TLS;

  return 0;
}



/////////////////////////////////////////////////////////////////////////

int net_tls_send_buffer(connection_tPtr ctx)
{
  tls_channel_tPtr tls_ctx = (tls_channel_tPtr)&(ctx->tls_channel);
  buffer_tPtr buff = (buffer_tPtr)&(ctx->send_buff);

	/*
  ssize_t sent_len = SSL_write(tls_ctx->g_ssl, buff->data, buff->length);
  DBG("sent_len = [%d]", sent_len);
	return sent_len;
	*/

	int ret = -1;

    while( ( ret = mbedtls_ssl_write( &tls_ctx->ssl, buff->data, buff->length ) ) <= 0 )
    {
        if( ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE )
        {
            ERR( " failed\n  ! mbedtls_ssl_write returned %d\n\n", ret );
            return -1;
        }
    }

    int sent_len = ret;
	DBG("sent_len = [%d]", sent_len);
	
	return sent_len;
}




int net_tls_recv_with_length(connection_tPtr ctx, char *recv_buff, int recv_len )
{
  tcp_channel_tPtr tcp_ctx = (tcp_channel_tPtr)&(ctx->tcp_channel);
  tls_channel_tPtr tls_ctx = (tls_channel_tPtr)&(ctx->tls_channel);

  // receive message.
  int want_read_now = recv_len;
  int total_length = 0;

    DBG( "  < Read from server:" );

	int ret = -1;
	do
    {
        ret = mbedtls_ssl_read( &tls_ctx->ssl, recv_buff, want_read_now );

        if( ret == MBEDTLS_ERR_SSL_WANT_READ || ret == MBEDTLS_ERR_SSL_WANT_WRITE )
            continue;

        if( ret == MBEDTLS_ERR_SSL_PEER_CLOSE_NOTIFY ){
		  ERR("peer may closed TLS session");
			/*
		  close(tcp_ctx->sock);
		  tcp_ctx->sock = -1;
		  return -1;
			*/
			break;
		}

        if( ret < 0 )
        {
            ERR( "failed\n  ! mbedtls_ssl_read returned %d", ret );
            break;
        }

        if( ret == 0 )
        {
            ERR( "\n\nEOF\n\n" );
            break;
        }

        total_length = ret;
        DBG( " %d bytes read", total_length);
    }
    while( 0 );

  return total_length;
}

int net_tls_recv_packet_with_header(connection_tPtr ctx)
{
  buffer_tPtr buff = (buffer_tPtr)&(ctx->recv_buff);

  int len = net_tls_recv_with_length(ctx, &buff->data[0], ctx->head_len_bytes);
  if ( len !=  ctx->head_len_bytes )  {
    ERR ("FAIL read head bytes");
  }
  buff->length = len;

  unsigned int packetLen = 0;

  if ( len == 4 )  {
    unsigned int len_tmp;
    memcpy((char*)&len_tmp, &buff->data[0], 4);
    packetLen = ntohl(len_tmp);
  }
  else if ( len == 2 )  {
    unsigned short len_tmp;
    memcpy((char*)&len_tmp, &buff->data[0], 2);
    packetLen = ntohs(len_tmp);
  }
  else if ( len == 1 )  {
    packetLen = (unsigned int)buff->data[0];
  }
  else {
    ERR ("FAIL pars head length");
    return -1;
  }

  DBG("packet length = [%d]", packetLen);

  len = net_tls_recv_with_length(ctx, &buff->data[len], packetLen);
  if ( len != packetLen )  {
    ERR ("FAIL read packet");
  }

  buff->length += len;

  DBG("Recv %ld bytes", buff->length);

  return buff->length;
}

int net_tls_recv_buffer_one(connection_tPtr ctx)
{
  tls_channel_tPtr tls_ctx = (tls_channel_tPtr)&(ctx->tls_channel);
  buffer_tPtr buff = (buffer_tPtr)&(ctx->recv_buff);

  int read_len = net_tls_recv_with_length(ctx, buff->data, IOBUFF_MAX_SIZE);  
  buff->length = read_len;
  DBG("read_len = [%d]", read_len);

  if (read_len < 0) {
    ERR("recv error! %d", errno);
    return -1;
  } else if (read_len == 0) {
    WRN("peer may closed TLS session");

    tls_ctx->g_connected = -1;

    return -1;
  }
  
  return read_len;
}



int net_tls_recv_buffer_one(connection_tPtr ctx)
{
  tls_channel_tPtr tls_ctx = (tls_channel_tPtr)&(ctx->tls_channel);
  buffer_tPtr buff = (buffer_tPtr)&(ctx->recv_buff);

	int read_len = SSL_read(tls_ctx->g_ssl, buff->data, IOBUFF_MAX_SIZE);         /* get reply & decrypt */
  buff->length = read_len;
  DBG("read_len = [%d]", read_len);

  if (read_len < 0) {
    ERR("recv error! %d", errno);
    return -1;
  } else if (read_len == 0) {
    WRN("peer may closed TLS session");

    tls_ctx->g_connected = -1;

    return -1;
  }


  return read_len;
}




int net_tls_recv_buffer(connection_tPtr ctx)
{
  tls_channel_tPtr tls_ctx = (tls_channel_tPtr)&(ctx->tls_channel);
  buffer_tPtr buff = (buffer_tPtr)&(ctx->recv_buff);

  if ( ctx->head_len_bytes > 0  ) {
    return net_tls_recv_packet_with_header(ctx);
  }
  else if ( ctx->enable_SOH == 1 )  {
    ERR("Not implemented");
    return -1;
  } 

	return net_tls_recv_buffer_one(ctx);

}


//////////////////////////////////////////

/* ===============================
 * > 0 : read event
 * = 0 : timeout
 * < 0 : error
 * =============================== */
int net_tls_available_timeout(connection_tPtr ctx, int seconds)
{
  tcp_channel_tPtr tcp_ctx = (tcp_channel_tPtr)&(ctx->tcp_channel);

	if ( tcp_ctx->sock < 0 )  {
		ERR("invalid socket [%d] ", tcp_ctx->sock);
    return -1;
  }

  return net_fd_available_for_read_timeout_msec(tcp_ctx->sock, seconds*1000);
}

int net_tls_available(connection_tPtr ctx)
{
  tcp_channel_tPtr tcp_ctx = (tcp_channel_tPtr)&(ctx->tcp_channel);

	if ( tcp_ctx->sock < 0 )  {
		ERR("invalid socket [%d] ", tcp_ctx->sock);
    return -1;
  }

  return net_fd_available_for_read_timeout_msec(tcp_ctx->sock, 1);
}


#endif  //HAVE_MBEDTLS